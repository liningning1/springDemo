<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	
	<!-- 为该项目全局的servletContext 添加参数(键值对)  -->
	<!-- 第三段,讲如何部署applicationContext的xml文件，
	如果在web.xml中不写任何参数配置信息，默认的路径是”/WEB-INF/applicationContext.xml，
	在WEB-INF目录下创建的xml文件的名称必须是applicationContext.xml。
	如果是要自定义文件名可以在web.xml里加入contextConfigLocation这个context参数： -->
	<context-param>
	  <param-name>contextConfigLocation</param-name>
	  <param-value>classpath:spring-application.xml,classpath:spring-security.xml</param-value>
	</context-param>
	<filter>
	 <filter-name>encode</filter-name>
	 <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	 <init-param>
	  <param-name>encoding</param-name>
	  <param-value>utf-8</param-value>
	 </init-param> 
	</filter>
	<filter-mapping>
	 <filter-name>encode</filter-name>
	 <url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。
	               因为它实现了ServletContextListener这个接口，
	               在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。 -->
	<listener>
	 <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- DispatcherServlet是前端控制器设计模式的实现，提供spring Web MVC的集中访问点，
	               而且负责职责的分派，而且与Spring IoC容器无缝集成，从而可以获得Spring的所有好处 -->
	<servlet>
	  <servlet-name>springmvc</servlet-name>
	  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	  <init-param>
	   <param-name>contextConfigLocation</param-name>
	   <param-value>classpath:spring-servlet.xml</param-value>
	  </init-param>
	  <load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
	 <servlet-name>springmvc</servlet-name>
	 <url-pattern>*.html</url-pattern>
	</servlet-mapping>
	
	<!-- 增加了spring security 3.1 的权限过滤 -->
	<filter>
	  <filter-name>springSecurityFilterChain</filter-name>
	  <!--  Spring MVC过滤器-委派过滤器代理（DelegatingFilterProxy）  
	        org.springframework.web.filter中有一个特殊的类——DelegatingFilterProxy，
	                        该类其实并不能说是一个过滤器，它的原型是FilterToBeanProxy，
	                        即将Filter作为spring的bean，由spring来管理。 -->
	  <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
	 <filter-name>springSecurityFilterChain</filter-name>
	 <url-pattern>/background/*</url-pattern>
	</filter-mapping>
	
	<welcome-file-list>
	  <welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	
	<error-page>
	  <error-code>404</error-code>
	  <location>/404/404.jsp</location>
	</error-page>
	<error-page>
	 <exception-type>java.lang.Exception</exception-type>
	 <location>/error.jsp</location>
	</error-page>
	
	
	
	
	
	
	
	
</web-app>